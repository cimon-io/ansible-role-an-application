---
- import_tasks: requirements.yml
  tags: [application, application-install]

- name: "Get the current time for a timestamp"
  command: "date +%Y%m%d-%H%M%S"
  register: timestamp
  changed_when: false
  tags: [application-deploy, application]

- name: "Create main application directory"
  file:
    path: "{{ application_prefix }}/{{ application_name }}"
    state: directory
    owner: "{{ application_user }}"
    group: "{{ application_group }}"
    mode: 0775
  become: True
  tags: [application]

- name: "Create application directories"
  file:
    path: "{{ application_prefix }}/{{ application_name }}/{{ item }}"
    state: directory
    owner: "{{ application_user }}"
    group: "{{ application_group }}"
    mode: 0775
  with_items:
    - releases
    - shared
  become: True
  tags: [application]

- name: "Get list of previous releases"
  find:
    paths: "{{ application_prefix }}/{{ application_name }}/releases"
    file_type: "directory"
  register: _release_dirs
  tags: [application-deploy, application, application-cleanup]

- name: "Create additional shared directories"
  file:
    path: "{{ application_prefix }}/{{ application_name }}/shared/{{ item.src }}"
    state: directory
    owner: "{{ application_user }}"
    group: "{{ application_group }}"
    mode: 0775
  when: item.dir is defined
  with_items: "{{ application_shared }}"
  become: True
  tags: [application-deploy, application]

- import_tasks: environ.yml
  when: application_environment | length > 0
  tags: [application-deploy, application-env, application]

- name: "Create application directory"
  file:
    path: "{{ application_prefix }}/{{ application_name }}/releases/{{ timestamp.stdout }}"
    state: directory
    owner: "{{ application_user }}"
    group: "{{ application_group }}"
    mode: 0775
  become: True
  tags: [application-deploy, application]

- import_tasks: storages/git.yml
  when: application_repository | length > 0
  tags: [application-deploy, application]

- import_tasks: storages/http.yml
  when: application_url | length > 0
  tags: [application-deploy, application]

- import_tasks: storages/s3.yml
  when: application_s3_bucket | length > 0
  tags: [application-deploy, application]

- import_tasks: storages/local.yml
  when: application_archive | length > 0
  tags: [application-deploy, application]

- name: "Link shared resources to the application"
  file:
    src: "{{ application_prefix }}/{{ application_name }}/shared/{{ item.src }}"
    dest: "{{ application_prefix }}/{{ application_name }}/releases/{{ timestamp.stdout }}/{{ item.dest }}"
    state: link
    force: yes
  when: item.dest is defined
  become: True
  become_user: "{{ application_user }}"
  with_items: "{{ application_shared }}"
  tags: [application-deploy, application]

- name: "Create VERSION file"
  template:
    src: "version.j2"
    dest: "{{ application_prefix }}/{{ application_name }}/releases/{{ timestamp.stdout }}/VERSION"
    force: no
    owner: "{{ application_user }}"
    group: "{{ application_group }}"
    mode: 0644
  when: application_release_version | length > 0
  become: True
  tags: [application-deploy, application]

- name: "Prepare the application"
  shell: "/bin/bash -lc '{{ item }}'"
  args:
    chdir: "{{ application_prefix }}/{{ application_name }}/releases/{{ timestamp.stdout }}"
  environment: "{{ application_environment }}"
  become: True
  become_user: "{{ application_user }}"
  with_items: "{{ application_prepare }}"
  tags: [application-deploy, application]

- name: "Link deployed application to current directory"
  file:
    src: "{{ application_prefix }}/{{ application_name }}/releases/{{ timestamp.stdout }}"
    dest: "{{ application_prefix }}/{{ application_name }}/current"
    state: link
    force: yes
  register: _app_updated
  become: True
  become_user: "{{ application_user }}"
  tags: [application-deploy, application]

- name: "Create list with old releases"
  set_fact:
    _release_paths: "{{ _release_dirs.files | sort(attribute='ctime') | map(attribute='path') | reverse | list }}"
  tags: [application-deploy, application, application-cleanup]

- name: "Cleanup"
  file:
    name: "{{ item }}"
    state: absent
  with_items: "{{ _release_paths[application_keep_versions:] }}"
  become: True
  become_user: "{{ application_user }}"
  tags: [application-deploy, application, application-cleanup]

- name: "Restart application"
  systemd:
    name: "{{ item }}"
    state: restarted
  with_items: "{{ application_services }}"
  when:
    - application_services | length > 0
    - _app_updated is changed or _app_env_updated is changed
  tags: [application-deploy, application]
